// ##### Global Mixins and Placeholders ##### //

// Create short media query blocks:

@mixin bp($point) {

  @if $point == screen1 {
    @media (min-width: $screen1) { @content; }

  } @else if $point == screen2 {
    @media (min-width: $screen2) { @content; }

  } @else if $point == screen3 {
    @media (min-width: $screen3) { @content; }

  } @else if $point == screen4 {
    @media (min-width: $screen4) { @content; }

  } @else if $point == screen5 {
    @media (min-width: $screen5) { @content; }
  }

}

/*

Selector pattern using above media query mixin:

.selector {
  property: $value;

  @include bp(screen1) {
    property: $value;
  }

  @include bp(screen2) {
    property: $value;
  }

  @include bp(screen3) {
    property: $value;
  }

}

*/

// Bleed component to left/right of viewport by equalling <body> left/right padding:

%page-bleed {
  margin: 0 (-$spacing-sm);

  @include bp(screen2) {
    margin: 0 (-$spacing-md);
  }

}

// Enlarge an interactive element's minimum width and height if there's a touch screen:

%interactive-element-size { 
  min-width: $pointer-size-fine;
  min-height: $pointer-size-fine;

  @media (any-pointer: coarse) {
    min-width: $pointer-size-coarse;
    min-height: $pointer-size-coarse;
  }

}

// Enlarge a <summary> element's height if there's a touch screen. Height should match element height of %interactive-element-size utility above:

%interactive-summary-size { 
  padding-top: 0.5em;
  padding-bottom: 0.5em;

  @media (any-pointer: coarse) {
    padding-top: 0.9em;
    padding-bottom: 0.9em;
  }

}

/*

Set an interactive element's styles if there's a touchscreen (coarse) or mouse-only screen (fine). Example:

@include interactive-element-pointer(coarse) {
  property: $value;
}

*/

@mixin interactive-element-pointer($pointer-size) {

  @if $pointer-size == coarse {
    
    @media (any-pointer: coarse) {
      @content;
    }

  // The "fine" option is not currenty used in any components but here for possible future cases:

  } @else if $pointer-size == fine {

    @media (any-pointer: fine) {
      @content;
    }

  }

}

// No bullet unordered lists

%no-bullet-ul {
  margin: 0;
  padding: 0;

  li {
    list-style: none;
  }

}

// Hide/show something visually but not for screen readers

%hide {
  position: absolute;
  left: -9999px;
}

%show {
  position: static;
  left: auto;
}

// Navigation item styles

%nav-item {
  @extend %interactive-element-size;
  display: flex;
  align-items: center;
  padding: $spacing-base $spacing-sm;
  border: 1px solid $color-dark-gray;
  background: $color-white;
  color: $color-dark-gray;
  font-size: 1.1em;
  text-decoration: none;

  &:hover:not(div) {
    color: $color-dark-orange;
  }

}

// Headings generator

@mixin headings($from: 1, $to: 6) {
  @for $i from $from through $to {
    h#{$i} {
      @content
    }
  }
}

// Clear floats

%clearfix {

  &::after {
    display: table;
    clear: both;
    content: '';
  }

}

// Wrap long strings of unbroken text to prevent text overflow.

%overflow-wrap {
  overflow-wrap: break-word; // all except IE
  word-wrap: break-word; // Legacy IE browsers
  word-break: break-all; // Modern Windows browsers
  hyphens: auto;
}

/*

Background color with progressively-enhanced blur effect. Example:

@include background-filter($color-black);

*/

@mixin background-filter($bgcolor) {
  background-color: rgba($bgcolor, 0.7);

  @supports (backdrop-filter: blur()) {
    background-color: rgba($bgcolor, 0.6);
    backdrop-filter: blur(5px);
  }

}

%clear-fieldset-styles {
  margin: 0;
  padding: 0;
  border: none;
}

%responsive-images {

  img {
    display: block;
    max-width: 100%;
  }

}
